= Buildnode: A libary to ease interaction with cxml:dom documents and nodes =

== Primary Goals ==
 * To define packages of functions that can generate specific xml 
   dialects (see the src/tags directory and associated asd files).

 * To add iterate drivers for various dom interactions
 
 * To provide a reasonable base of funcationality for smoothing 
   common dom interactions such ass
   * adding, removing, moving nodes
   * adjusting attributes and values
   * adjusting css classes

 * To provide a flexible tool for programatically generating 
   and manipulating various and sundry xml formats

== Example: ==

;; sets up document context (this form will return a dom:document
(buildnode:with-html-document 
  ;; attributes are plists, if the att name is a string casing is preseverd
  ;; if the att name is a symbol it is downcased to a string
  (let ((title-tag (xhtml:h1 '(:class "title") "My Page Title")))
    (flet ((form-ctl (type name value)
	     (xhtml:input `(:type ,type :name ,name :value ,value))))
      (xhtml:html '("ID" "my-html") 
	(xhtml:head ()
	  (xhtml:title () "My Page Title"))
	(xhtml:body ()
	  (xhtml:div '(:id "page")
	    (xhtml:div '(:id "header")
	      (xhtml:div '(:class "title-holder")
		;; functions that manipulate the dom, try to
		;; return the element, so that these manipulations
		;; can be done in line
		(set-attribute title-tag :title "my page title"))
	      (xhtml:div '(:class"nav")

		;; functions can return dom snippets that can be manipulated
		;; and added to the dom
		(set-attributes
		 (form-control "checkbox")
		 :checked :checked)
		
		(xhtml:ul '(:class "nav-items")
		  ;; tags can be collected, and manipulated
		  ;; lists and vectors of dom nodes are handled appropriately
		  ;; ie: this UL will have 12 children 
		  (list (xhtml:li () "a test")
			(xhtml:li () "a second test"))
		  (iter (for i from 0 to 9)
			(collect
			    (xhtml:li () (format nil "Nav ~A" i)))))))
	    
	    (xhtml:div '(:id "content")
	      (xhtml:h2 `(:id "article-title" :title "totally the title of this article"
			      :name "article-title-name")
		"What its about"))
	    (xhtml:div '(:id "footer" :class "layout box bottom-aligned"
			 :title "this-be-the-page-footer-yo")
	      (xhtml:div '(:class "contact-info")
		
		;; Text content can be spliced into the dom using the inner-html
		;; function.  This call will result in a div that contains span(dyn) being
		;; created and inserted into the contact-info span
		(inner-html "<span id=\"dyn\"> Text content being spliced right in </span>")
		
		(xhtml:span '(:class "name")
		  "Acceleration.net")
		(xhtml:span '(:class "phone")
		  "352-335-6500x123")))))))))

;;;; Copyright (C) 2011 Acceleration.net, Russ Tyndall
;;;;   email: bobbysmith007@gmail.com
;;;;
;;;; This program is free software: you can redistribute it and/or modify
;;;; it under the terms of the GNU Lesser General Public License as published by
;;;; the Free Software Foundation, under version 3 of the License.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU Lesser General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;;;
;;;; Copyright (C) 2011 Acceleration.net, Russ Tyndall
;;;;   email: bobbysmith007@gmail.com
;;;;
;;;; This program comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
;;;; This is free software, and you are welcome to redistribute it
;;;; under certain conditions; for details see COPYING.
